name: Closest Pair CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-22.04

    steps:
      - name: Download the repo
        uses: actions/checkout@v3
      - name: Get the dependencies
        run: sudo apt-get install -qy mpich
      - name: Compile the code
        run: |
          cd parallel
          mpicc main.c -lm
      # - name: Download the repo
      #   uses: actions/checkout@v3
      # - name: Connect to VPN
      #   id: connect_to_vpn
      #   uses: ./.github/workflows/setup_vpn
      #   with:
      #     unitn_username: ${{secrets.UNITN_USERNAME}}
      #     unitn_password: ${{secrets.UNITN_PASSWORD}}
      # - name: Stop VPN
      #   run: |
      #     kill -15 ${{ steps.connect_to_vpn.outputs.vpn_pid }}
      #     rm ./unitn_vpn_script.sh
      #     rm ./unitn_hireport.sh

  deploy_on_cluster:
    name: Deploy on cluster
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Download the repo
        uses: actions/checkout@v3
      - name: Get dependencies for later
        run: sudo apt-get install -qy petname sshpass mpich
      - name: Connect to VPN
        id: connect_to_vpn
        uses: ./.github/workflows/setup_vpn
        with:
          unitn_username: ${{secrets.UNITN_USERNAME}}
          unitn_password: ${{secrets.UNITN_PASSWORD}}
      - name: Populate notify_on_telegram
        run: |
          sed -i 's/<BOT_TOKEN>/${{secrets.BOT_TOKEN}}/g' ./scripts/notify_on_telegram.sh
          sed -i 's/<TELEGRAM_CHAT_ID>/${{secrets.TELEGRAM_CHAT_ID}}/g' ./scripts/notify_on_telegram.sh
      - name: Test the connection to the cluster
        env:
          SSHPASS: ${{secrets.UNITN_PASSWORD}}
        run: |
          mkdir -p ~/.ssh/
          # If this step fails, the keys have probably changed. Do an SSH from your pc and update them here
          echo "hpc2.unitn.it ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHALG5fiqoi+CXHjzbK+wZWQxtx1sGodKKPK1Zv/YweB" >> ~/.ssh/known_hosts
          echo "hpc2.unitn.it ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBF86esyRmGePgo+439HtbJQjpB8J4A1OI/GgrrW9vr6ttpGZ2GXOCZpTrt4yhk+mVCnpAK65ki/3CAVXOTv68ms=" >> ~/.ssh/known_hosts
          sshpass -e ssh -l "${{secrets.UNITN_USERNAME}}" hpc2.unitn.it "echo ''"
      - name: Copy code on the cluster
        id: copy_to_cluster
        env:
          SSHPASS: ${{secrets.UNITN_PASSWORD}}
        run: |

          DATE_NOW=$(date +%s)
          PETNAME=$(petname)
          JOB_TAG="${PETNAME}_${DATE_NOW}"
          UNITN_BASE=$(echo "${{secrets.UNITN_USERNAME}}" | sed 's/@unitn.it//')
          BASE_DIR=/home/${UNITN_BASE}/HPC_course
          CODE_DIR=$BASE_DIR/code
          RUN_DIR=$BASE_DIR/runs/$JOB_TAG

          sshpass -e \
            ssh -l "${{secrets.UNITN_USERNAME}}" hpc2.unitn.it \
              "for i in {1..10}; do
                rm -rf $CODE_DIR ./unitn_vpn_script.sh ./unitn_hireport.sh
                mkdir -p $CODE_DIR
               done;
               ls $CODE_DIR
              "

          echo -n "$JOB_TAG" > ./scripts/tag
          RUN_TRIGGER_FILE=./scripts/run_trigger
          echo "JOB_TAG=$JOB_TAG" > $RUN_TRIGGER_FILE
          echo "Github commit hash=${{GITHUB.SHA}}" >> $RUN_TRIGGER_FILE
          echo "Github commit author=${{GITHUB.ACTOR}}" >> $RUN_TRIGGER_FILE

          sed -i "s/{{UNITN_BASE}}/$UNITN_BASE/g" ./scripts/entrypoint.sh 

          sshpass -e \
            scp -r -o "user=${{secrets.UNITN_USERNAME}}" . "hpc2.unitn.it:$CODE_DIR"

          sshpass -e \
            ssh -l "${{secrets.UNITN_USERNAME}}" hpc2.unitn.it \
              "for i in {1..10}; do
                mkdir -p $RUN_DIR;
               done;
               ls $RUN_DIR
               mv $CODE_DIR/scripts/* $RUN_DIR/
              "

          echo "RUN_DIR=$RUN_DIR" >> $GITHUB_OUTPUT
          echo "CODE_DIR=$CODE_DIR" >> $GITHUB_OUTPUT
      - name: Compile the code
        env:
          SSHPASS: ${{secrets.UNITN_PASSWORD}}
        run: |
          CODE_DIR=${{steps.copy_to_cluster.outputs.CODE_DIR}}
          sshpass -e \
            ssh -l "${{secrets.UNITN_USERNAME}}" hpc2.unitn.it \
              "cd $CODE_DIR/parallel
               module load mpich-3.2
               mpicc -o parallel_closest_points main.c -lm
               module unload mpich-3.2
               mv $CODE_DIR/parallel/parallel_closest_points ${{steps.copy_to_cluster.outputs.RUN_DIR}}/
              "
      - name: Run the entrypoint
        env:
          SSHPASS: ${{secrets.UNITN_PASSWORD}}
        run: |
          sshpass -e \
            ssh -l "${{secrets.UNITN_USERNAME}}" hpc2.unitn.it \
              "cd ${{steps.copy_to_cluster.outputs.RUN_DIR}}
               ./entrypoint.sh
              "
      - name: Stop VPN
        run: |
          kill -15 ${{ steps.connect_to_vpn.outputs.vpn_pid }}
